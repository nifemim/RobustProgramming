
*** RUNNING THE PROGRAM ***

Run 'make' in the directory where the files are stored. To edit the exact gcc command, edit the makefile.

After running make, run 'main.exe' or the executable out file created on make.

To test out different routines, edit the main.c file and substitute existing command calls with your own. I know it's crude to manually edit the main.c file every single time you want to test stuff out... But such is life :)

*** PREMISE ***

This implementation of a linked list incorporates techniques described by Matt Bishop in his paper 'Robust Programming'. Of concern is how to structure files and design the content of their programs in such a way that "prevents abnormal termination of unexpected actions" and can "handle bad (invalid or absurd) inputs in a reasonable way". This implementation is premised on the principles of robust programming:
- paranoia: don't trust anything you don't generate!
- stupidity: assume the caller is "an idiot"
- dangerous implements: anything that your routines expect to remain consistent across calls
- 'can't happen': wrong, anything can happen

Using this approach programming, I have implemented a safer, and more secure linked list than common implementations.

*** SPECS ***

1. Error handling and reporting

On incident of error, my routines print informative messages to the screen, and return specific error codes.
The error codes are defined as macros in linklib.h. For instance, if malloc fails, the error code 'LE_NOMEMORY' (defined as -2) is returned. The prefix LE stands for 'list errror'. All error code macros are negative ints; this way I can test if a routine returns an error using the simple check:

	#define LE_ISERROR(x) ((x) < 0)

The error messages printed to the screen are written into a global extern buffer variable 'le_errbuf' which is defined in linklib.h. For instance, if malloc returns an error in the routine create_list, the error buffer is filled with the string:

	"create_list: error allocating memory for list"

This combination of error codes and printed error messages keeps users informed of what exactly went wrong with their program.

2. Tickets

In my program, linked lists are stored, accessed, and modified using a ticketing system applied to an undisclosed array of linked list and list node structs:

	typedef struct LinkedList {
		LNODE *head;
		LTICKET ticket;
	} LINKED_LIST;

	typedef struct ListNode {
		void* data;
		struct ListNode *next;
	} LNODE;

These structs are defined in linklib.c because neither the user nor routines outside of this file should have access to the structs or be able to modify their content/format. This addresses the dangerous implements and paranoia premises.
Every linked list is stored in an array of LINKED_LIST structs defined as a static global variable - this restricts its scope to the file linklib.c, and thus provides it with more protection from routines outside of the file. The routines of my program used to access and modify particular linked lists are declared in linklib.h and defined in linklib.c. These routines NEVER accept or return an actual struct or an address of a struct and its data members. Instead, linked lists are accessed via tickets. These tickets are created in such a way that they contain specific unique indexes into the global array which contains all linked list structs. For instance, see below the definition of the delete_list procedure:
	
	int delete_list(LTICKET ticket);		/* delete a list */

This procedure takes in a ticket number, checks if this ticket refers to a valid linked list, deletes the list, and then returns either an error or success code. Tickets are created as a 32 bit combination of two 16 bit numbers - the array index of the list and a nonce. A nonce is a unique ID. The reason for a nonce is that over the course of the program, it is possible that several linked lists would have occupied the same index in the array. So as not to confuse past linked lists with present linked lists, we identify each list with a new unique nonce. The index and nonce are combined into a single positive 32 bit number using an invertible function. To see the details of this function, read the routines create_ticket and read_ticket defined in linklib.c. These functions are defined in linklib.c so they are not accessible to outside routines.
